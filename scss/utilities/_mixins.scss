@use "sass:map";
@use "sass:math";
@use "sass:meta";

@use "maps" as mp;
@use "variables" as v;





//===================================================================
//  Font Stack
//===================================================================


//  Creado para mantener agrupadas todas las propiedades relacionadas al texto
//  y así mantener cierta unidad y orden a lo largo del proyecto en cuanto
//  a estas características.

@mixin font-stack(
  $t-a: null,
  $t-d: null,
  $t-s: null,
  $l-h: null,
  $l-e: null,
  $c: null,
  $f-s: null,
  $f-w: null,
  ) {

  @if $t-a {text-align: $t-a;}
  @if $t-d {text-decoration: $t-d;}
  @if $t-s {text-shadow: $t-s;}
  @if $l-h {line-height: $l-h;}
  @if $l-e {letter-spacing: $l-e;}
  @if $c {color: $c;}
  @if $f-s {font-size: $f-s;}
  @if $f-w {font-weight: map.get(mp.$font-weight, $f-w);}
}


//===================================================================
//  Cierre de Font Stack
//===================================================================




//===================================================================
//  Size
//===================================================================


//  Creado para mantener agrupadas todas las propiedades relacionadas al 'width'
//  y 'height' para así mantener cierta unidad y orden a lo largo del proyecto en
//  cuanto a estas características.

@mixin size(
  $w: null,
  $h: null,
  $wmin: null,
  $wmax: null,
  $hmin: null,
  $hmax: null,
  ) {
  
  @if $w {width: $w;}
  @if $wmin {min-width: $wmin;}
  @if $wmax {max-width: $wmax;}
  @if $h {height: $h;}
  @if $hmin {min-height: $hmin;}
  @if $hmax {max-height: $hmax;}
}


//===================================================================
//  Cierre de Size
//===================================================================




//===================================================================
//  Size Plato
//===================================================================

//  Creado para definir en varios elementos del documeto 'plato' un 
//  'min-width' y 'max-width' debido a que es una medida recurrente en
//  varios de ellos. También existe la posibilidad de cambiar esos valores
//  predeterminados ya que en ocasiones es necesario hacerlo.

@mixin size-plato ($wmin: 26rem, $wmax: 31.25rem){
  min-width: $wmin;
  max-width: $wmax;
}

//===================================================================
//  Cierre de Size Plato
//===================================================================




//===================================================================
//  Cards
//===================================================================

//  Mixin que genera los estilos base de las 'cards' utilizadas en varias
//  páginas del sitio.

@mixin cards() {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  transition: background-color 0.4s;
  background-color: v.$orange-02;
  
  &:hover {
    background-color: v.$orange-05;
  }
}

//===================================================================
//  Cierre de Cards
//===================================================================




//===================================================================
//  Color Hover
//===================================================================


//  Mixin que genera un 'background-color' en ':hover' dependiendo de si la clase
//  del elemento en cuestión se encuentra dentro de un 'header--brown' o 'header--blue'.


@mixin color-hover($color: v.$white, $map...) {

  @each $color-header, $background in meta.keywords($map) {
    .header--#{$color-header} &:hover {
      background-color: $background;
      @if $color {@include font-stack($c: $color);}
    }
  }
}


//  Ejemplo.

//  Mapa suministrado:

//  $header-color: (
//    'brown': v.$brown,
//    'blue': v.$light-blue,
//  );

//  .element {
//    @include color-hover(mp.$header-color...);
//  }

//  Código resultante:

//  header--brown .element:hover {
//    background-color: rgba(113, 83, 67, 1);
//    color: #fff;
//  }

//  header--blue .element:hover {
//    background-color: rgba(15, 159, 214, 1);
//    color: #fff;
//  }


//===================================================================
//  Cierre de Color Hover
//===================================================================




//===================================================================
//  Color Nav
//===================================================================


//  Mixin que genera un 'background-color' dependiendo de si la clase del elemento
//  en cuestión ('header__navbar') se encuentra dentro de un 'header--brown' o
//  'header--blue'.

@mixin color-nav($map...) {
  @each $color-header, $background in meta.keywords($map) {
    .header--#{$color-header} & {
      background-color: $background;
    }
  }
}


//  Ejemplo.

//  Mapa suministrado:

//  $header-color-05: (
//    'brown': v.$brown-05,
//    'blue': v.$light-blue-05,
//  );

//  .header__navbar {
//    @include color-nav(mp.$header-color-05...);
//  }

//  Código resultante:

//  header--brown .header__navbar {
//    background-color: rgba(113, 83, 67, 0.5);
//  }

//  header--blue .header__navbar {
//    background-color: rgba(15, 159, 214, 0.5);
//  }


//===================================================================
//  Cierre de Color Nav
//===================================================================




//===================================================================
//  Responsive
//===================================================================


//  Creado para declarar las distintas 'media queries' a lo largo del proyecto.


@mixin responsive($size) {

  @if map.has-key(mp.$breakpoints, $size) {//  1*
    @media #{meta.inspect(map.get(mp.$breakpoints, $size))} {//  2*
      @content;
    }
  } @else if meta.type-of($size) == number {//  3*
      @if math.is-unitless($size) {//  4*
        $size-in-px: $size * 1px;

        @media (min-width: #{$size-in-px}) {
          @content;
        }
      } @else {//  5*
        @media (min-width: #{$size}) {
          @content;
        }
      }
  } @else {//  6*
    @warn "Desafortunadamente no existe ningún valor para '#{$size}'."
          "Asegúrese de que esté definido en el mapa '$breakpoints'."
          "O bien que sea un número válido.";
  }
}


//  Explicación:

//  1*  Si el mapa '$breakpoints' contiene el '$size' suministrado.
//  2*  Devuelve el valor que tiene asociado el $size en el mapa $breakpoints
//      después de una declaración '@media'.
//  3*  Si no, se corrobora que el '$size' sea un número.
//  4*  Si es un número, en caso de que no tenga unidades, se lo convierte a
//      'px' y se imprime la declaración '@media' que sigue.
//  5*  Si es un número con unidades, directamente se imprime la declaración
//      '@media' que sigue.
//  6*  Si el mapa '$breakpoints' no contiene el $size suministrado y tampoco
//      este es un número, devolvemos el siguiente '@warn' para alertar sobre
//      el problema en cuestión.


//  Ejemplo.

//  .element {
//    @include responsive('md') {
//      position: sticky;
//      top: -4.3rem;
//    }
//  }


//  Código resultante:

//  @media (min-width: 768px) {
//    .element {
//      position: sticky;
//      top: -4.3rem;
//    }
//  }


//===================================================================
//  Cierre de Responsive
//===================================================================




//===================================================================
//  Bg Title-Secondary
//===================================================================


//  Creado para declarar los 'background' del 'title-secondary-section' del documento 'index'

@mixin bg-title-secondary {
  @each $breakpoint in (null, 'sm', 'md', 'lg') {//  1*

    @if $breakpoint {//  2*
      @include responsive($breakpoint) {//  3*
        background:
                  url('../media/index/#{$breakpoint}/hero-image.png') no-repeat center top,
                  transparent radial-gradient(if($breakpoint == 'sm', closest-side at 50% 22%, closest-side at 50% 33%), v.$white 0%, v.$light-brown 100%)//  4*
                  0% 0% no-repeat padding-box;
        @if $breakpoint == 'md' {margin-top: -17.2rem;}//  5*
        @if $breakpoint == 'lg' {margin-top: -11.6969rem;}//  5*
      }
    } @else {//  6*
      background-color: v.$light-brown;
      background:
                  url('../media/index/hero-image.png') no-repeat center top,
                  transparent radial-gradient(closest-side at 50% 22%, v.$white 0%, v.$light-brown 100%)
                  0% 0% no-repeat padding-box;
    }
  }
}


//  Explicación:

//  1*  Genero un bucle y declaro los valores de los '$breakpoint' a utilizar.
//  2*  En este caso, si el '$breakpoint' es distinto de 'null'.
//  3*  Llamamos al mixin 'responsive' pasándole el '$breakpoint' correspondiente
//      a la iteración del bucle.
//  4*  El 'radial-gradient' del '$breakpoint' 'sm' necesita una posición distinta
//      a la posición de los '$breakpoints' 'md' y 'lg'.
//  5*  Condicionales dependientes de un '$breakpoint'.
//  6*  En este caso, si el '$breakpoint' es igual a 'null' devolvemos las
//      declaraciones que siguen.


//  Ejemplo.

//  .title-secondary-section {
//    @include mx.bg-title-secondary;
//  }

//  Código resultante (solo se muestra un '$breakpoint' del bucle):

//  @media (min-width: 576px) {
//    .title-secondary-section {
//      background:
//                url('../media/index/sm/hero-image.png') no-repeat center top,
//                transparent radial-gradient(closest-side at 50% 22%, #fff 0%, rgba(247, 231, 148, 1) 100%) 
//                0% 0% no-repeat padding-box;
//    }
//  }


//===================================================================
//  Cierre de Bg Title-Secondary
//===================================================================




//===================================================================
//  Bg Articles
//===================================================================

//  Creado para declarar los 'background' de los tres '.principal-section__article'
//  del documento 'index'.

@mixin bg-articles($breakpoint: null) {

  @each $selector, $bg, $gradient in (//  1*
      1 v.$light-blue v.$blue-gradient,
      2 v.$orange v.$orange-gradient,
      3 v.$light-brown v.$white
      ) {

      $url: url('../media/index/bg-#{$selector}.png');
      $url-breakpoint: url('../media/index/#{$breakpoint}/bg-#{$selector}.png');

      @if $breakpoint != 'lg' {//  2*
        &--#{$selector} {
          @if not $breakpoint {background-color: $bg;}//  3*
          background: if($breakpoint, $url-breakpoint, $url) no-repeat center,//  4*
                      transparent radial-gradient(closest-side at 50% 50%, #{$gradient} 0%, #{$bg} 100%)
                      0% 0% no-repeat padding-box;
        }
      } @else {//  5*
        &--#{$selector} {
          background: radial-gradient(if(math.abs($selector) == 2, closest-side at 67% 50%, closest-side at 33% 50%), #{$gradient} 0%, #{$bg} 100%);//  6*
        }
      }
    }
  }


//  Explicación:

//  1*  Genero un bucle y declaro los valores asociados a las tres variaciones
//      del 'principal-section__article'.
//  2*  Si el '$breakpoint' suministrado es distinto de 'lg' genero el bucle con
//      los valores que siguen.
//  3*  Si no se declara un '$breakpoint' devolverá la propiedad 'background-color'
//      ya que esta se suministra una sola vez en las pantallas más pequeñas.
//  4*  Si se declara un '$breakpoint' (por ej. 'md') va a devolver la 'url'
//      perteneciente a la variable '$url-breakpoint'. Si no se declara un
//      '$breakpoint', al ser su valor por defecto 'false', devolverá la 'url'
//      perteneciente a la variable '$url'.
//  5*  Si el '$breakpoint' suministrado es igual a 'lg', genero el bucle con los
//      valores que siguen.
//  6*  El '.principal-section__article--2' necesita una posición distinta a los
//      '--1' y '--3'.


//  Ejemplo.

//  .principal-section__article {
//    @include bg-articles('md');
//  }


//  Código resultante:

//  .principal-section__article--1 {
//    background: url('../media/index/md/bg-1.png') no-repeat center,
//                      transparent radial-gradient(closest-side at 50% 50%, rgba(82, 201, 221, 1) 0%, rgba(15, 159, 214, 1) 100%)
//                      0% 0% no-repeat padding-box;
//   }

//  .principal-section__article--2 {
//    background: url('../media/index/md/bg-2.png') no-repeat center,
//                      transparent radial-gradient(closest-side at 50% 50%, rgba(255, 160, 123, 1) 0%, rgba(237, 125, 59, 1) 100%)
//                      0% 0% no-repeat padding-box;
//   }

//  .principal-section__article--3 {
//    background: url('../media/index/md/bg-3.png') no-repeat center,
//                      transparent radial-gradient(closest-side at 50% 50%, #fff 0%, rgba(247, 231, 148, 1) 100%)
//                      0% 0% no-repeat padding-box;
//   }


//===================================================================
//  Cierre de Bg Articles
//===================================================================




//===================================================================
//  Bg Main
//===================================================================

//  Mixin que genera los 'background-image' del elemento 'main' de la página 'menu',
//  dependiendo de los distintos breakpoints y pantallas de visualización.

@mixin bg-main {

  @each $breakpoint in (null, 'sm', 'md', 'lg', 'xl', 'xxl') {//  1*
    @if $breakpoint {//  2*
      $value-breakpoint: map.get(mp.$breakpoints, $breakpoint, 'min-width');//  3*

      @include responsive($breakpoint) {//  4*
        background: url('../media/menu/#{$breakpoint}/hero-image.png') no-repeat if($value-breakpoint < 992px, center top, right top),//  5*
                    radial-gradient(closest-side at 50% 50%, v.$white 0%, v.$light-brown 100%);
        @if $breakpoint == 'md' {margin-top: -17.2rem;}//  6*
        @if $breakpoint == 'lg' {margin-top: -11.6969rem;}//  6*
      }
    } @else {//  7*
      background-color: v.$light-brown;
      background: url('../media/menu/hero-image.png') no-repeat center top,
                  radial-gradient(closest-side at 50% 50%, v.$white 0%, v.$light-brown 100%);
    }
  }
}


//  Explicación:

//  1*  Genero un bucle y declaro los valores de los '$breakpoint' a utilizar.
//  2*  En este caso, si el '$breakpoint' es distinto de 'null'.
//  3*  Obtenemos el valor perteneciente al 'min-width' a través de una búsqueda
//      'profunda' buscando más allá del primer valor 
//      (ej. "'sm': (min-width: 576px)" solo devuelve '576px').
//  4*  Llamamos al mixin 'responsive' pasándole el '$breakpoint' correspondiente
//      a la iteración del bucle.
//  5*  Para las pantallas menores a '992px' se utiliza una posición y para las
//      iguales o mayores, otra.
//  6*  Condicionales dependientes de un '$breakpoint'.
//  7*  En este caso, si el '$breakpoint' es igual a 'null' devolvemos las
//      declaraciones que siguen.


//  Ejemplo.

//  .main-background {
//    @include bg-main;
//  }


//  Código resultante (solo se muestra un '$breakpoint' del bucle):

//  @media (min-width: 576px) {
//    .main-background {
//      background: url('../media/menu/sm/hero-image.png') no-repeat center top,
//                  radial-gradient(closest-side at 50% 50%, #fff 0%, rgba(247, 231, 148, 1) 100%);
//    }
//  }


//===================================================================
//  Cierre de Bg Main
//===================================================================




//===================================================================
//  Bg Info Nutricional
//===================================================================

//  Mixin que genera distintos tipos de 'background' para la clase 
//  'info-nutricional__principal' dependiendo de que esta pertenezca a
//  un 'plato' específico, a través de los distintos breakpoints.

@mixin bg-info-nutricional {
  @each $breakpoint in (null, 'sm', 'md', 'lg') {//  1*

    @if $breakpoint {//  2*
      @include responsive($breakpoint) {//  3*

        @if $breakpoint == 'sm' {//  4*
          @include size-plato(0, none);
          padding: 6.3rem 0;
        } @else if $breakpoint == 'md' {
          padding-bottom: 7.5rem;
        } @else {
          background-position: 45.35rem;
          padding: {
            right: 7.7rem;
            left: 7.7rem;
          }
        }

        @for $selector from 1 through 9 {//  5*
          &--plato-#{$selector} {
            background-image: url('../media/plato-#{$selector}/#{$breakpoint}/info-nutricional.png');
            @if $selector == 5 {//  6*
              @if $breakpoint == 'sm' {background-position: center top -2rem;}
              @if $breakpoint == 'md' {background-position: center top -5rem;}
              @if $breakpoint == 'lg' {background-position: 30rem;}
            }
          }
        }
      }
    } @else {//  7*
      @for $selector from 1 through 9 {
        &--plato-#{$selector} {
          background-image: url('../media/plato-#{$selector}/info-nutricional.png');
          @if $selector == 5 {background-position: right 1.2rem top -3rem;}
        }
      }
    }
  }
}


//  Explicación:

//  1*  Genero un bucle y declaro los valores de los '$breakpoint' a utilizar.
//  2*  En este caso, si el '$breakpoint' es distinto de 'null'.
//  3*  Llamamos al mixin 'responsive' pasándole el '$breakpoint' correspondiente
//      a la iteración del bucle.
//  4*  Acá se declaran reglas generales (para todos los 'platos') dependiendo
//      del '$breakpoint'.
//  5*  Genero otro bucle para crear los distintos tipos de 'background-image'
//      correspondientes a cada 'plato' (del '--plato-1' al '--plato-9').
//  6*  Si el '$selector' es igual a '5' se crean condicionales dependiendo algunos
//      '$breakpoints' ya que ese 'plato' tiene una imagen de dimensiones distintas
//      a las demás.
//  7*  En este caso, si el '$breakpoint' es igual a 'null' devolvemos las
//      declaraciones que siguen.


//  Ejemplo.

//  .info-nutricional__principal {
//    @include bg-info-nutricional;
//  }


//  Código resultante (solo se muestra un '$breakpoint' y 'plato' de los bucles):

//  @media (min-width: 576px) {
//    .info-nutricional__principal {
//      min-width: 0;
//      max-width: none;
//      padding: 6.3rem 0;
//    }

//    .info-nutricional__principal--plato-1 {
//      background-image: url('../media/plato-1/sm/info-nutricional.png');
//    }
//  }


//===================================================================
//  Cierre de Bg Info Nutricional
//===================================================================